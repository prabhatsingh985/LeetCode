class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
      solve(board);     
    }
     bool solve(vector< vector< char >> & board){
          for(int i = 0; i<  board.size(); i++){
              for(int j = 0; j< board[i].size(); j++){
                   if(board[i][j] == '.'){ 
                         for(char  ch = '1'; ch <= '9'; ch++){
                             if(isValid(board , i, j, ch)){
                                 board[i][j] = ch;
                                  if(solve(board)) return true;
                                  else board[i][j] = '.';
                             }
                          }
                        return false;
                   }
              }
         }
        
         return true;
    }
    bool isValid(vector< vector< char >> &board , int row , int col, char ch){
         for(int i =0 ; i< 9; i++){
              if(board[i][col] == ch || board[row][i] == ch) return false;
         }
         for(int i = 0; i< 9; i++){
             int r = 3 * (row/3) + i/3;
             int c =  3 * (col/3) + i%3;
              if(board[r][c] == ch) return false;
         }
        return true;
    }
};